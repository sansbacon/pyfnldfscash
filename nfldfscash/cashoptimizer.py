# cashoptimizer.py
# optimizer with eye on cash games

import logging
import pandas as pd
from pydfs_lineup_optimizer import get_optimizer, Site, Sport, Player, CSVLineupExporter


logging.getLogger(__name__).addHandler(logging.NullHandler())


def generate_lineups(o, n):
    """Generates n lineups"""
    lineups = []
    for _ in range(n):
        for lineup in o.optimize(1, randomness=True):
            lineups.append(lineup)
    return lineups


def lineups_to_df(lineups):
    """Converts list of lineups to dataframe"""
    selected_players = []
    wanted = ['id', 'team', 'salary', 'fppg']
    for idx, l in enumerate(lineups):
        for p in l.lineup:
            pl = {'used_fppg': p.used_fppg}
            pl = dict(**pl, **{k:v for k, v in p._player.__dict__.items() if k in wanted})
            pl['position'] = p.positions[0]
            pl['simid'] = idx + 1
            pl['proj'] = p._player.fppg
            selected_players.append(pl)
    df = pd.DataFrame(selected_players)
    cols = ['simid', 'id', 'position', 'team', 'salary', 'used_fppg', 'proj']
    return df.loc[:, cols]
    

def lineup_summary(df, iterations, thresh=.1):
    """Summarizes lineups generated by optimizer"""
    return (
        df
        .groupby(['id', 'position', 'team'])
        .agg(n=('simid', 'count'), simfpts=('used_fppg', 'mean'), proj=('proj', 'mean'))
        .assign(diff=lambda x: x['simfpts'] - x['proj'])
        .reset_index()
        .sort_values(['position', 'n'], ascending=[True, False]) 
        .query(f'n > {iterations * thresh}')
    )


if __name__ == '__main__':
    pass
